generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum TemplateTopic {
  EDU
  QUIZ
  OTHER
}

enum QuestionType {
  TEXT
  PARAGRAPH
  MCQ
  CHECKBOX
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String   @db.VarChar(255)
  lastName     String   @db.VarChar(255)
  username     String   @db.VarChar(50)
  email        String   @unique @db.VarChar(100)
  passwordHash String   @db.VarChar(255)
  role         UserRole @default(USER)
  isBlocked    Boolean  @default(false)
  createdAt    DateTime @default(now())

  templates      Template[]
  forms          Form[]
  accessControls AccessControl[]
  comments       Comment[]
  likes          Like[]
}

model Template {
  id          Int           @id @default(autoincrement())
  creator     User          @relation(fields: [createdBy], references: [id])
  createdBy   Int
  title       String        @db.VarChar(255)
  description String        @db.Text
  createdAt   DateTime      @default(now())
  topic       TemplateTopic
  isPublic    Boolean       @default(false)
  deletedAt   DateTime?

  questions      Question[]
  forms          Form[]
  accessControls AccessControl[]
  comments       Comment[]
  likes          Like[]
  tags           TemplateTag[]
}

model Question {
  id           Int          @id @default(autoincrement())
  templateId   Int
  template     Template     @relation(fields: [templateId], references: [id])
  questionText String       @db.Text
  type         QuestionType
  order        Int

  options   QuestionOption[]
  responses Response[]
}

model QuestionOption {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  option     String   @db.Text

  responses Response[]
}

model Form {
  id         Int       @id @default(autoincrement())
  authorId   Int
  author     User      @relation(fields: [authorId], references: [id])
  templateId Int
  template   Template  @relation(fields: [templateId], references: [id])
  filledAt   DateTime  @default(now())
  deletedAt  DateTime?

  responses Response[]
}

model Response {
  id         Int             @id @default(autoincrement())
  formId     Int
  form       Form            @relation(fields: [formId], references: [id])
  questionId Int
  question   Question        @relation(fields: [questionId], references: [id])
  answer     String?         @db.Text
  optionId   Int?
  option     QuestionOption? @relation(fields: [optionId], references: [id])
}

model AccessControl {
  id         Int      @id @default(autoincrement())
  templateId Int
  template   Template @relation(fields: [templateId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
}

model Comment {
  id         Int       @id @default(autoincrement())
  authorId   Int
  author     User      @relation(fields: [authorId], references: [id])
  templateId Int
  template   Template  @relation(fields: [templateId], references: [id])
  content    String    @db.Text
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
}

model Like {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  templateId Int
  template   Template @relation(fields: [templateId], references: [id])

  @@unique([userId, templateId])
}

model Tag {
  id      Int    @id @default(autoincrement())
  tagName String @unique

  templateTags TemplateTag[]
}

model TemplateTag {
  id         Int      @id @default(autoincrement())
  tagId      Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  templateId Int
  template   Template @relation(fields: [templateId], references: [id])

  @@unique([tagId, templateId])
}
